<html>

<head>
    <TITLE>SJ</TITLE>
    <base target="_blank" />
    <META http-equiv="Content-Type" content="text/html;" charset="UTF-8">
    <META name="viewport" content="width=device-witdh, initial-scale=1, maximum-scale=1, user-scale=0">


    <style>
        body {
            margin-bottom: 600px;
        }

        .Hili {
            background-color: red;
        }

        input,
        td[contenteditable] {
            background-color: lightgoldenrodyellow;
        }

        .table_holder_edit {
            overflow-y: scroll;
            display: block;
            background-color: antiquewhite;
            height: 300px;
        }

        .mystorage {
            float: right;
        }

        h3 {
            margin-left: auto;
            margin-right: auto;
        }

        .printable {
            background-color: aliceblue;

        }

        @media print {
            footer {
                page-break-after: always;
            }
        }
    </style>

    <style>
        /* d3 set the CSS */

        .line {
            fill: none;
            stroke: steelblue;
            stroke-width: 2px;
        }

        .grid line {
            stroke: lightgrey;
            stroke-opacity: 0.7;
            shape-rendering: crispEdges;
        }

        .grid path {
            stroke-width: 0;
        }

        .axis {
            stroke: black;
            stroke-opacity: 0.5;
            stroke-width: 1px;
            /**-weid-**/
        }

        .axis line {
            stroke: grey !important;
            opacity: 0.5;
            /**-weid: scale numbers-**/
        }

        .axis--x {
            stroke: black;
            /**-weid: scale numbers-**/
        }

        .axis--y {
            stroke: black;
            /**-weid: scale numbers-**/
        }
        .axis_bar_middle_horz {
            stroke-width: 3px;
            stroke-opacity: 1;
            /**-weid: middle dark line-**/
        }
    </style>
    <script src="./js/chart.js" xxsrc="https://cdn.jsdelivr.net/npm/chart.js"></script>
    <script src="./journey_data.js"></script>
    <script src="./js/d3.v4.min.js" xxxxsrc="https://d3js.org/d3.v4.min.js"></script>

    <script>
        var labels = [
            'January',
            'February',
        ];
        labels = []
        for (var yr = 1964; yr <= 2025; yr++) {
            labels.push("" + yr)
        }

        var my_test_ary = [{ x: 1964, y: -100 }, { x: 1964, y: 100 }, { x: 1964, y: 0 }, { x: 1967, y: -50 }]
        my_test_ary = [{ x: "1964", y: -100 }, { x: "1964", y: 100 }, { x: "1964", y: 0 }, { x: "1966", y: null }, { x: "2025", y: 0 }]

        var data = {
            labels: labels,
            datasets: [
                {
                    label: 'My Spiritual Journey So Far',
                    backgroundColor: 'rgb(255, 99, 132)',
                    borderColor: 'rgb(255, 99, 132)',
                    //data: [-50, 10, 5, 2, 20, 30, 45],
                    data: null
                },
                {
                    label: 'Middle-line',
                    backgroundColor: 'rgb(15, 99, 132)',
                    borderColor: 'rgb(100, 99, 132)',
                    //data: [-50, 10, 5, 2, 20, 30, 45],
                    data: my_test_ary
                },
            ]
        };

        var config = {
            type: 'line',
            data: data,
            options: {}
        };
    </script>

    <script>
        function gen_table_new() {
            yearStar.save()
            var yrs = document.getElementById("StartYear").value
            var sofar = 3 + parseInt((new Date).getFullYear())
            var obj = {}
            for (var yr = parseInt(yrs); yr <= sofar; yr++) {
                obj["" + yr] = ["", ""]
            }
            gen_tbody_by_obj(obj)
            //var dat = obj_to_chart_data(obj)
            update_graph(obj, 1)
        }
        function gen_tbody_by_obj(obj) {
            gen_tbody_by_obj_editable(obj)
        }

        function on_edit_change() {
            var obj = get_data_fr_table()
            tout_set_value(obj)
            storage_save_forced()
        }
        function obj_to_chart_data(obj) {
            var ary = []
            Object.keys(obj).forEach(function (yr, i) {
                var lev = obj[yr][0], des = obj[yr][1]
                if (lev) {
                    var pobj = { x: (yr), y: parseInt(lev) }
                    ary.push(pobj)
                }
            })
            //data.datasets.data = ary
            return ary;
        }


        function on_level_input(evt) {
            var val = evt.value
            console.log(val)
            if (parseInt(val) <= -101) val = ''
            evt.parentElement.nextSibling.innerHTML = val
        }
        function on_level_Change(evt) {
            //update graphic
            var obj = get_data_fr_table()
            //localStorage.setItem("tbid", JSON.stringify(obj))
            tout_set_value(obj)
            storage_save_forced()
            //var dat = obj_to_chart_data(obj)
            update_graph(obj)
        }
        function toggleNextVisibility(evt) {
            var val = evt.nextSibling.firstChild.style.visibility === "hidden" ? "visible" : "hidden"
            evt.nextSibling.firstChild.style.visibility = val
            var elms = document.getElementsByClassName("Hili")
            for (var i = 0; i < elms.length; i++) {
                elms[i].classList.remove("Hili")
            };
            evt.classList.add("Hili");
        }
        function Printable_table() {
            document.getElementById("table_holder").classList.toggle("table_holder_edit")
            var ar = document.getElementsByClassName("table_holder_edit")
            var obj = storage_save_forced()
            if (ar.length > 0) {
                gen_tbody_by_obj_editable(obj)
                document.getElementById("Printable_tableBtn").innerHTML = "Printable"
            } else {
                gen_tbody_by_obj_printable(obj)
                document.getElementById("Printable_tableBtn").innerHTML = "Editable"
            }
        }
        function gen_tbody_by_obj_editable(obj) {
            var trs = "", idx = 0
            Object.keys(obj).forEach(function (yr, i) {
                var lev = obj[yr][0], des = obj[yr][1]
                var dlev = lev.length === 0 ? -101 : lev
                var slev = lev.length === 0 ? "" : parseFloat(lev).toFixed(1)

                trs += `<tr><td>${i++}</td><td onclick="toggleNextVisibility(this);">${yr}</td><td><input oninput="on_level_input(this);" onchange="on_level_Change(this);" class="level" style="visibility:visible;" type="range" min="-101" max="100" value="${dlev}"></input></td><td>${slev}</td><td onkeyup='on_edit_change()' contenteditable='true'>${des}</td></tr>`
            })
            var tab = `<table border='1' id="tbid"><thead><tr><th>Age</th><th>Year</th><th colspan='2'>Level</th><th>desc</th></tr></thead><tbody>${trs}</tbody></table>`
            document.getElementById('table_holder').innerHTML = tab;
        }
        function gen_tbody_by_obj_printable(obj) {
            var trs = "", idx = 0
            Object.keys(obj).forEach(function (yr, i) {
                var lev = obj[yr][0], des = obj[yr][1]
                var dlev = lev.length === 0 ? -101 : lev
                var slev = lev.length === 0 ? "" : parseFloat(lev).toFixed(1)

                if (lev.length > 0) {
                    trs += `<tr><td>${i++}</td><td onclick="toggleNextVisibility(this);">${yr}</td><td>${slev}</td><td>${des}</td></tr>`
                }
            })
            var tab = `<table border='1' class='printable'><thead><tr><th>Age</th><th>Year</th><th>Level</th><th>desc</th></tr></thead><tbody>${trs}</tbody></table>`
            document.getElementById('table_holder').innerHTML = tab;
            //document.getElementById('table_holder').classList.toggle("table_holder_edit")
        }
        function on_GenerateData() {
            var obj = get_data_fr_table()
            if (Object.keys(obj).length === 0) return alert("Please create a table first.")
            tout_set_value(obj)
        }
        function storage_save() {
            var str = document.getElementById("tout").value.toString().trim()
            var obj = get_data_fr_table()
            if (str.length <= 2) {
                if (confirm("Get data from table.\nSure?")) {
                    tout_set_value(obj)
                }
                return;
            } else {
                try {
                    obj = JSON.parse(str)
                } catch {
                    return alert("JSON parse ERR.")
                }
                if (!confirm("Overwrite date?")) return
            }

            localStorage.setItem("tbid", JSON.stringify(obj))
            document.getElementById("tout").value = ""
        }
        function storage_save_forced() {
            var str = document.getElementById("tout").value.toString().trim()
            localStorage.setItem("tbid", str)
            if (str.length <= 2) return null
            var obj = null;
            try {
                obj = JSON.parse(str)
            } catch {
                alert("error in textarea")
            }
            return obj
        }
        function storage_load() {
            var str = localStorage.getItem("tbid")
            if (!str) return
            var obj = JSON.parse(str)
            tout_set_value(obj)
            //gen_tbody_by_obj(obj)
            //var dat = obj_to_chart_data(obj)
            //update_graph(obj)
            return obj
        }
        function on_load_file() {
            document.getElementById("tout").value = JSON.stringify(journey_data, null, 4)
        }
        function get_data_fr_table() {
            var ar = document.getElementsByTagName("tr")
            var obj = {}
            for (var i = 1; i < ar.length; i++) {
                var etds = ar[i].children
                var yrs = etds[1].textContent
                var lev = etds[3].textContent
                var txt = etds[4].textContent
                obj[yrs] = [lev, txt]
            }
            return obj;
        }
        function update_graph(tobj, iLine) {
            var dat = obj_to_chart_data(tobj)
            //update_by_chart(dat, iLine)
            var dat = get_d3_data_fr_tbdat(tobj);//journey_data_obj) //////==>weid
            Run_d3(dat, function (ptrs) {
                var ptrObj = {}
                for (var i = 0; i < ptrs.length; i++) {
                    var x = ptrs[i][0]
                    var y = ptrs[i][1]
                    ptrObj["" + x] = "" + y
                }
                var idx = -1, years = Object.keys(tobj).sort()
                for (var i = 0; i < years.length; i++) {
                    var tyrs = "" + years[i]
                    var tval = "" + tobj[tyrs][0]

                    if (tval.length > 0 && ptrObj[tyrs] !== tval) {
                        tobj[tyrs][0] = "" + (ptrObj[tyrs])
                        idx = i;
                    }
                }
                gen_tbody_by_obj(tobj)
                tr_scrollIntoView(idx + 1)
                tout_set_value(tobj)
                storage_save_forced()

            })
        }
        function tout_set_value(obj) {
            document.getElementById("tout").value = JSON.stringify(obj, null, 4)
        }
        function tr_scrollIntoView(idx) {
            if (idx <= 0) return
            var trs = document.getElementsByTagName("tr");
            if (idx >= trs.length) return
            trs.item(idx).scrollIntoView(false)
            trs.item(idx).classList.add("Hili")
        }
        function update_by_chart(datary, iLine) {
            if (undefined === iLine) iLine = 0
            // JS - Destroy exiting Chart Instance to reuse <canvas> element
            let chartStatus = Chart.getChart("myChart"); // <canvas> id
            if (chartStatus != undefined) {
                chartStatus.destroy();
            }

            //restart 
            labels = []
            datary.forEach(function (obj) {
                labels.push("" + obj.x)
            })
            console.log(datary)
            config.data.datasets[iLine].data = datary
            //config.data.datasets[1].data = datary
            config.data.labels = labels
            const myChart = new Chart(
                document.getElementById('myChart'),
                config
            );
        }
        function on_view_data() {
            document.getElementById("tout").style.backgroundColor="yellow"
            var str = document.getElementById("tout").value
            if (str.trim().length === 0) {
                document.getElementById("tout").focus()
                document.getElementById("tout").style.backgroundColor="red"
                return alert("no data to read. Please paste or load your data here.")
            }
            try {
                var obj = JSON.parse(str);
                //var dat = obj_to_chart_data(obj)
                gen_tbody_by_obj(obj)
                update_graph(obj)
            } catch {
                alert("json data error.")
            }
        }
        function on_Copy_Text2_clipboard() {
            // Get the text field
            var copyText = document.getElementById("tout");

            // Select the text field
            copyText.select();
            copyText.setSelectionRange(0, 99999); // For mobile devices

            // Copy the text inside the text field
            navigator.clipboard.writeText(copyText.value);

            // Alert the copied text
            //alert("Copied the text: " + copyText.value);
        }

        function MyStorage(id) {
            this.m_id = id
            this.load()
        }
        MyStorage.prototype.load = function () {
            var val = localStorage.getItem(this.m_id)
            if (!val) {
                val = 1960

            }
            var ttt = document.getElementById(this.m_id)
            document.getElementById(this.m_id).value = val
            return val;
        }
        MyStorage.prototype.save = function () {
            localStorage.setItem(this.m_id, document.getElementById(this.m_id).value)
        }


    </script>

</head>


<body>
    <center>
        <strong onclick="Printable_table()">My Spiritual Journey So far</strong>
    </center>
    <div>

        <svg width="1000" height="450"></svg>
    </div>

    <div id="table_holder" class="table_holder_edit">
        <table border="1">
            <thead>
                <tr>
                    <th>Age</th>
                    <th>Year</th>
                    <th colspan="2">Level</th>
                    <th>Description</th>
                </tr>
            </thead>
            <tbody id="tbid">

            </tbody>
        </table>
    </div>

    <footer></footer>

    <hr>
    <a>Year Start:</a> <input id="StartYear" value=""></input><button
        onclick="gen_table_new();">CreateNewTableEditable</button></button>
    <button class="mystoragex" onclick="on_GenerateData();">GenerateDataFrTable</button>
    <button class="mystorage" id="Printable_tableBtn" onclick="Printable_table();">Printable</button>
    <hr>

    <button class="mystoragex" onclick="on_view_data();">DrawData</button>
    <button class="mystoragex" onclick="storage_save();">SaveToCookies</button>
    <button class="mystoragex" onclick="storage_load();">LoadCookies</button>
    <button class="mystoragex" onclick="on_load_file();">journey_data.js</button>
    <button class="mystoragex" onclick="on_Copy_Text2_clipboard();">copy</button>
    <br>
    <textarea class="mystoragex" id="tout" cols="60" style="height:200px"></textarea>

</body>

</html>

<script>


    var yearStar = new MyStorage("StartYear")
    //update_graph(my_test_ary)
    //update_graph(my_test_ary)
    storage_load()
    setTimeout(function () {
        on_view_data()
    }, 100)

</script>

<script>
    function get_d3_data_fr_tbdat(tbobj) {
        var d3ar = []
        Object.keys(tbobj).forEach(function (yrs) {
            var x = parseFloat(yrs)
            var y = tbobj[yrs][0]
            if (y && y.length > 0) {
                y = parseFloat(y)
                d3ar.push([x, y])
            }
        })
        return d3ar
    }
    function Run_d3(d3ary, cbf_dragend) {

        //var svg = d3.select("svg");
        var svg = d3.select("svg"),
            margin = { top: 30, right: 50, bottom: 30, left: 40 },
            width = +svg.attr("width") - margin.left - margin.right,
            height = +svg.attr("height") - margin.top - margin.bottom;

        svg.selectAll("*").remove() //refresh weid

        let points = d3.range(1, 10).map(function (i) {
            return [i * width / 10, 50 + Math.random() * (height - 100)];
        });
        points = d3ary;//get_d3_data(journey_data_obj) //////==>weid


        var x = d3.scaleLinear()
            .rangeRound([0, width]);

        var y = d3.scaleLinear()
            .rangeRound([height, 0]);


        var xAxis = d3.axisBottom(x),
            yAxis = d3.axisLeft(y);
        var xAxis = d3.axisBottom(x)
            //.ticks((width + 2) / (height + 2) * 10)
            .tickSize(-height) //directiong
            .tickPadding(height + 5 - height)//string location ||
            .tickFormat(d3.format("d")) //D3 remove comma delimiters for thousands

        var yAxis = d3.axisLeft(y) //=
            .tickSize(-width) //directiong
            .tickPadding(width + 5 - width)//;//string location;




        var line = d3.line()
            .x(function (d) { return x(d[0]); })
            .y(function (d) { return y(d[1]); });

        let drag = d3.drag()
            .on('start', dragstarted)
            .on('drag', dragged)
            .on('end', dragended)


        svg.append('rect')
            .attr('class', 'zoom')
            .attr('cursor', 'move')
            .attr('fill', 'none')
            .attr('pointer-events', 'all')
            .attr('width', width)
            .attr('height', height)
            .attr('transform', 'translate(' + margin.left + ',' + margin.top + ')')

        var focus = svg.append("g")
            .attr("transform", "translate(" + margin.left + "," + margin.top + ")");

        x.domain(d3.extent(points, function (d) { return d[0]; }));
        y.domain(d3.extent(points, function (d) { return d[1]; }));

        focus.append("path")
            .datum(points)
            .attr("fill", "none")
            .attr("stroke", "steelblue")
            .attr("stroke-linejoin", "round")
            .attr("stroke-linecap", "round")
            .attr("stroke-width", 1.5) //
            .attr("d", line);

        focus.selectAll('circle')
            .data(points)
            .enter()
            .append('circle')
            .attr('r', 5.0)
            .attr('cx', function (d) { return x(d[0]); })
            .attr('cy', function (d) { return y(d[1]); })
            .style('cursor', 'pointer')
            .style('fill', 'steelblue');

        focus.selectAll('circle')
            .call(drag);

        /////// weid: add text on circle /////////////////////
        focus.selectAll("text")
            .data(points)
            .enter()
            .append('text')
            .text(function (d) { return d[0] }) //text year.
            .attr("dx", 1) //x offset of point
            .attr("dy", -10) //y offset of point
            .attr("transform", function (d) { return `translate(${x(d[0])},${y(d[1])})` }) //position text
        ////////////////////////////////////////////////////////////////////////////////
      
        //  weid: add title on axis
        focus.append("text")
            .attr("transform", "rotate(-90)")
            .attr("y", 0 - margin.left - 3)
            .attr("x", -10 - (height / 5))
            .attr("dy", "1em")
            .style("text-anchor", "middle")
            .text("Positive Spiritual Experiences");
        focus.append("text")
            .attr("transform", "rotate(-90)")
            .attr("y", 0 - margin.left - 5)
            .attr("x", 0 - (height * 4 / 5))
            .attr("dy", "1em")
            .style("text-anchor", "middle")
            .text("Negative Spiritual ");
        focus.append("text")
            .attr("transform", "")
            .attr("y", height - 10)
            .attr("x", width + 20)
            .attr("dy", "1em")
            .style("text-anchor", "middle")
            .text("Years");
        ////////////////////////////////////////////////////////////////////////////////

        focus.append('g')
            .attr('class', 'axis axis--x')
            .attr('transform', 'translate(0,' + height + ')')
            .call(xAxis);
            

        focus.append('g')
            .attr('class', 'axis axis--y') //y-axis scale numbers.
            .call(yAxis)
            .call(g => g.selectAll(".tick:nth-last-of-type(6) line")
                .attr("class", " axis_bar_middle_horz") //weid added.
                );


        function dragstarted(d) {
            d3.select(this).raise().classed('active', true);
        }

        function dragged(d) {
            //d[0] = x.invert(d3.event.x); //weid. allow y move only.
            d[1] = y.invert(d3.event.y);
            d3.select(this)
                .attr('cx', x(d[0]))
                .attr('cy', y(d[1]))
            focus.select('path').attr('d', line);
            //console.log("dragged=", d)
        }

        function dragended(d) {
            d3.select(this).classed('active', false);
            console.log("dragended=", d)
            console.log(JSON.stringify(points, null, 4))
            if (cbf_dragend) cbf_dragend(points, d3ary)
        }

        console.log(JSON.stringify(points, null, 4))

        //svg.remove()


    }
</script>